{
  "info": {
    "name": "Webhook Service API - Technical Task Implementation",
    "description": "Complete API collection for Bahaa Ebraheem's webhook service technical task.\n\nImplements all required endpoints:\n‚Ä¢ POST /api/subscribers ‚Üí Create subscriber\n‚Ä¢ POST /api/subscribers/{id}/rotate-secret ‚Üí Rotate secret\n‚Ä¢ GET /api/subscribers/{id}/status ‚Üí Subscriber status\n‚Ä¢ POST /api/events ‚Üí Ingest event\n‚Ä¢ GET /api/deliveries?... ‚Üí Delivery logs\n‚Ä¢ GET /health ‚Üí Health check\n‚Ä¢ GET /metrics ‚Üí Prometheus metrics\n\nFeatures:\n‚úÖ HMAC-SHA256 signature validation\n‚úÖ Idempotency support (X-Idempotency-Key)\n‚úÖ Exponential backoff retry mechanism\n‚úÖ Redis caching with TTL\n‚úÖ Structured logging & metrics\n‚úÖ Circuit breaker pattern",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "description": "Docker container URL (port 5000 maps to internal 8080)"
    },
    {
      "key": "localUrl", 
      "value": "http://localhost:8080",
      "description": "Local development URL"
    },
    {
      "key": "tenantId",
      "value": "tenant-demo",
      "description": "Test tenant ID for subscriber matching"
    },
    {
      "key": "subscriberId",
      "value": "",
      "description": "Auto-populated from create subscriber response"
    },
    {
      "key": "eventId",
      "value": "",
      "description": "Auto-populated from create event response"
    }
  ],
  "item": [
    {
      "name": "üè• Health & Monitoring",
      "description": "Health checks and Prometheus metrics endpoints",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Health check returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains status', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response).to.have.property('checks');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "System health check - validates database and Redis connectivity\n\n**Implementation**: `src/WebhookService.Api/Endpoints/HealthEndpoints.cs` (lines 40-124)\n\n**Features**:\n- Database connectivity test\n- Redis connectivity test  \n- System memory usage\n- Response time measurement"
          },
          "response": []
        },
        {
          "name": "Prometheus Metrics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Metrics endpoint accessible', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Contains webhook metrics', function () {",
                  "    const body = pm.response.text();",
                  "    pm.expect(body).to.include('swr_events_total');",
                  "    pm.expect(body).to.include('swr_deliveries_total');",
                  "    pm.expect(body).to.include('swr_delivery_latency_ms');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/metrics",
              "host": ["{{baseUrl}}"],
              "path": ["metrics"]
            },
            "description": "Prometheus metrics endpoint\n\n**Implementation**: `src/WebhookService.Api/Program.cs` (lines 76-81)\n\n**Metrics**:\n- `swr_events_total` - Total events processed\n- `swr_deliveries_total{status}` - Delivery attempts by status\n- `swr_retries_total` - Total retry attempts\n- `swr_delivery_latency_ms` - Delivery latency histogram\n- `swr_circuit_open_total` - Circuit breaker status"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üë• Subscribers Management",
      "description": "Subscriber CRUD operations with secret rotation",
      "item": [
        {
          "name": "Create Subscriber",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Subscriber created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response contains subscriber data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('secret');",
                  "    pm.expect(response).to.have.property('keyId');",
                  "    ",
                  "    // Store subscriber ID for other requests",
                  "    pm.collectionVariables.set('subscriberId', response.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tenantId\": \"{{tenantId}}\",\n  \"callbackUrl\": \"https://webhook.site/{{$randomUUID}}\",\n  \"eventTypes\": [\"user.created\", \"order.completed\", \"payment.processed\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/subscribers",
              "host": ["{{baseUrl}}"],
              "path": ["api", "subscribers"]
            },
            "description": "Create new webhook subscriber\n\n**Implementation**: `src/WebhookService.Infrastructure/Services/SubscriberService.cs` (lines 51-96)\n\n**Features**:\n- Generates encrypted secret with AES-256\n- Creates unique KeyId for signature validation\n- Invalidates Redis cache for tenant\n- Returns secret only on creation (never again)\n\n**Security**: Secret is encrypted before storage and never logged"
          },
          "response": []
        },
        {
          "name": "Rotate Subscriber Secret",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Secret rotated successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains new secret', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('keyId');",
                  "    pm.expect(response).to.have.property('secret');",
                  "    pm.expect(response).to.have.property('updatedAt');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/subscribers/{{subscriberId}}/rotate-secret",
              "host": ["{{baseUrl}}"],
              "path": ["api", "subscribers", "{{subscriberId}}", "rotate-secret"]
            },
            "description": "Rotate subscriber secret key\n\n**Implementation**: `src/WebhookService.Infrastructure/Services/SubscriberService.cs` (lines 102-134)\n\n**Features**:\n- Generates new encrypted secret\n- Creates new KeyId\n- Invalidates Redis cache\n- Updates timestamp\n\n**Security**: Old secret is immediately invalidated"
          },
          "response": []
        },
        {
          "name": "Get Subscriber Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains status data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('isActive');",
                  "    pm.expect(response).to.have.property('eventTypes');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/subscribers/{{subscriberId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "subscribers", "{{subscriberId}}", "status"]
            },
            "description": "Get subscriber status and configuration\n\n**Implementation**: `src/WebhookService.Infrastructure/Services/SubscriberService.cs` (lines 136-159)\n\n**Features**:\n- Returns subscriber configuration\n- Shows active status\n- Lists subscribed event types\n- No sensitive data (secret/keyId excluded)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üì® Events Ingestion",
      "description": "Event publishing with idempotency support",
      "item": [
        {
          "name": "Send Event with Idempotency",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Event created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response contains event data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('eventId');",
                  "    pm.expect(response).to.have.property('matchedSubscribers');",
                  "    ",
                  "    // Store event ID for delivery queries",
                  "    pm.collectionVariables.set('eventId', response.eventId);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Idempotency-Key",
                "value": "user-created-{{$randomUUID}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tenantId\": \"{{tenantId}}\",\n  \"eventType\": \"user.created\",\n  \"payload\": {\n    \"userId\": \"user-{{$randomInt}}\",\n    \"email\": \"user{{$randomInt}}@example.com\",\n    \"name\": \"Test User\",\n    \"createdAt\": \"{{$isoTimestamp}}\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/events",
              "host": ["{{baseUrl}}"],
              "path": ["api", "events"]
            },
            "description": "Ingest event with idempotency protection\n\n**Implementation**: `src/WebhookService.Infrastructure/Services/EventService.cs` (lines 38-105)\n\n**Features**:\n- Idempotency key support (header or body)\n- Subscriber matching by tenantId and eventType\n- Parallel webhook dispatch\n- Metrics tracking\n\n**Security**: Duplicate events are rejected with 409 Conflict"
          },
          "response": []
        },
        {
          "name": "Send Order Completed Event",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Event processed successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Idempotency-Key",
                "value": "order-{{$randomUUID}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tenantId\": \"{{tenantId}}\",\n  \"eventType\": \"order.completed\",\n  \"payload\": {\n    \"orderId\": \"order-{{$randomInt}}\",\n    \"customerId\": \"customer-{{$randomInt}}\",\n    \"amount\": {{$randomInt}},\n    \"currency\": \"USD\",\n    \"completedAt\": \"{{$isoTimestamp}}\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/events",
              "host": ["{{baseUrl}}"],
              "path": ["api", "events"]
            },
            "description": "Send order completion event to test event type filtering"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üìã Delivery Logs",
      "description": "Query delivery attempts and status",
      "item": [
        {
          "name": "Get All Deliveries",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Deliveries retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains delivery data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('deliveries');",
                  "    pm.expect(response).to.have.property('totalCount');",
                  "    pm.expect(response).to.have.property('page');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/deliveries?page=1&pageSize=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "deliveries"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                }
              ]
            },
            "description": "Get paginated delivery logs\n\n**Implementation**: `src/WebhookService.Infrastructure/Services/DeliveryService.cs` (lines 28-75)\n\n**Features**:\n- Pagination support\n- Filtering by eventId, subscriberId, status\n- Date range filtering\n- Includes retry attempts and error details"
          },
          "response": []
        },
        {
          "name": "Get Deliveries by Event",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/deliveries?eventId={{eventId}}&page=1&pageSize=5",
              "host": ["{{baseUrl}}"],
              "path": ["api", "deliveries"],
              "query": [
                {
                  "key": "eventId",
                  "value": "{{eventId}}"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "5"
                }
              ]
            },
            "description": "Filter deliveries by specific event ID"
          },
          "response": []
        },
        {
          "name": "Get Failed Deliveries",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/deliveries?status=2&page=1&pageSize=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "deliveries"],
              "query": [
                {
                  "key": "status",
                  "value": "2",
                  "description": "Failed status (2)"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                }
              ]
            },
            "description": "Filter deliveries by failed status\n\nStatus values:\n- 0: Pending\n- 1: Success\n- 2: Failed\n- 3: Retrying\n- 4: DLQ (Dead Letter Queue)"
          },
          "response": []
        }
      ]
    }
  ]
}
